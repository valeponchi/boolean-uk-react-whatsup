Repo: boolean-uk-react-whatsup

Description
Make sure you read all the instructions carefully 
We're going to recreate an app that you might be familiar with, and apply all the concepts we've learned so far! This way we get to see how versatile React Can be!! You should be able to complete this exercise with only the basics of React, but you're welcome to try and use some of the libraries we've shown you in the meantime!!

Instructions
- Use this starter template => https://codesandbox.io/s/whatsup-react-starter-template-8zjgj
- Make sure you start your json-server using node db/server.js
-  You'll have to restart the server manually if you make changes to db.json
- Make sure you read the API endpoints section
- Render the login page, with the route /login
- Render the main app page with the route /logged-in
- Render the messages panel within the main app with the route /logged-in/:chatId
- When you land on the app, you should be taken to the login page
- If you navigate to /logged-in without choosing a user, you should be redirected to /login

Side panel
- On the main app, render the side panel with a list of all the chats the user is on
- Each item of the chats list should display the name of the other user in the chat, and a preview of the last message of the chat
- Render a search bar on the top of the side panel that search through the chats

Chat messages main panel
- When a user clicks on a chat from the side list, display all the chat messages in the messages section
- The logged-in user messages should appear on the right-hand side, while the other user's messages should appear on the left-hand side
- Render a message box 
- When a user submits a message, it should appear on the messages panel above
- If you change users, the new messages should appear as well in their chat
@here
Api Endpoints
Make sure you also check the database structure to better understand what to post in your requests

Besides all the routes you usually get from a json-server, there are 2 extra routes in this exercise that you can use to help you build all the functionality

- Get all the chats that belong to a user (this includes chats that the user is a participant) => conversations?userId=${userId}
- Get all the messages from a single chat => messages?conversationId=${chatId}

Tips
- You should be able to build this app with only the basics of React that we've been practising so far
- Think carefully where you'll put your state

Challenge
Add the ability to create a new user in the login screen, and a new chat between users in the chat list panel

Challenge 2
Let's make it look like it's live chatting!! Try to implement short polling. Create a fetch that runs every 500ms and checks if there are any new messages for a chat to display, giving the impression of real-time interaction. this fetch should start when the main messages panel mounts on the page, and stop if this component unmounts
